import React from 'react';
import { OverlayState } from '../constants/OverlayState';
/**
 * Hook manages safely transitioning video playback between
 * a playing or paused state, depending on the value of shouldPlayVideo
 *
 * @param {React.RefObject<HTMLVideoElement>} videoRef - Ref to the video element
 * @param {bool} shouldPlayVideo - Whether the video should currently be playing or not
 * @param {number} playbackRangeStart - The start time of the playback range that the video must be kept within
 * @param {number} playbackRangeEnd - The end time of the playback range that the video must be kept within
 * @param {bool} loop - Whether the video should loop when it reaches the end of its playback range or not
 *                        If a playback range is set, the native `loop` video attribute will not work, so we have to
 *                        manually implement this behavior ourselves.
 * @param {bool} restartOnPaused - Whether the video should be reset to the start when paused
 * @param {bool} shouldWaitForOverlayTransitionBeforePausing - Whether the player has an overlay which we should wait to fade back in before we pause the video
 * @param {bool} hasLoadingOverlay - Whether the player has an overlay to display when loading
 * @param {number} overlayTransitionDuration - How long it should take for overlays to fade in/out; this influences how long we should wait
 *                                              after the user stops hovering before fully pausing the video since the paused overlay needs time to fade in.
 * @param {number} loadingStateTimeout - How long to wait after starting a play attempt to fade in the loading overlay
 *
 * @returns {[OverlayState, bool]} An array with the current overlay state in the first position and whether the video player is active in the second positions
 */
export default function useManageVideoPlayback(videoRef: React.RefObject<HTMLVideoElement>, shouldPlayVideo: boolean, playbackRangeStart: number, playbackRangeEnd: number, loop: boolean, restartOnPaused: boolean, shouldWaitForOverlayTransitionBeforePausing: boolean, hasLoadingOverlay: boolean, overlayTransitionDuration: number, loadingStateTimeout: number): [OverlayState, boolean];
